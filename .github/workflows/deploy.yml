name: Deploy to AWS Lambda

on:
  push:
    branches:
      - main

jobs:
  deploy_lambda:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set Up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Install Production Dependencies
        run: |
          cd api
          npm install --only=prod --force  # Install only production dependencies

      - name: Generate Prisma Binaries
        run: |
          cd api
          npx prisma generate  # Required for Prisma to work in Lambda

      - name: Create Lambda Layer 1 (Core Dependencies)
        run: |
          cd api

          # Create the correct directory structure for the layer
          mkdir -p layer1/nodejs/node_modules

          # Copy core dependencies into the layer
          cp -r node_modules/express layer1/nodejs/node_modules/
          cp -r node_modules/cors layer1/nodejs/node_modules/
          cp -r node_modules/aws-serverless-express layer1/nodejs/node_modules/
          cp -r node_modules/dotenv layer1/nodejs/node_modules/
          cp -r node_modules/jsonwebtoken layer1/nodejs/node_modules/
          cp -r node_modules/zod layer1/nodejs/node_modules/
          cp -r node_modules/pg layer1/nodejs/node_modules/
          cp -r node_modules/passport layer1/nodejs/node_modules/
          cp -r node_modules/passport-google-oauth20 layer1/nodejs/node_modules/
          cp -r node_modules/lodash layer1/nodejs/node_modules/
          cp -r node_modules/axios layer1/nodejs/node_modules/
          cp -r node_modules/node-cron layer1/nodejs/node_modules/

          # Zip the layer
          cd layer1
          zip -r layer1.zip nodejs

          # Publish the layer and capture the ARN
          LAYER1_ARN=$(aws lambda publish-layer-version \
            --layer-name "schedsync-layer-1" \
            --zip-file "fileb://layer1.zip" \
            --compatible-runtimes "nodejs22.x" \
            --query 'LayerVersionArn' \
            --output text)

          # Store the ARN in GitHub environment variables for later use
          echo "LAYER1_ARN=$LAYER1_ARN" >> $GITHUB_ENV

      - name: Create Lambda Layer 2 (AI & DB Dependencies)
        run: |
          cd api

          # Create the correct directory structure for the layer
          mkdir -p layer2/nodejs/node_modules

          # Copy AI & DB dependencies into the layer
          cp -r node_modules/@prisma layer2/nodejs/node_modules/
          cp -r node_modules/prisma layer2/nodejs/node_modules/  # Include Prisma client
          cp -r node_modules/@google layer2/nodejs/node_modules/
          cp -r node_modules/@langchain layer2/nodejs/node_modules/
          cp -r node_modules/@pinecone-database layer2/nodejs/node_modules/
          cp -r node_modules/openai layer2/nodejs/node_modules/
          cp -r node_modules/serverless-http layer2/nodejs/node_modules/

          # Zip the layer
          cd layer2
          zip -r layer2.zip nodejs

          # Publish the layer and capture the ARN
          LAYER2_ARN=$(aws lambda publish-layer-version \
            --layer-name "schedsync-layer-2" \
            --zip-file "fileb://layer2.zip" \
            --compatible-runtimes "nodejs22.x" \
            --query 'LayerVersionArn' \
            --output text)

          # Store the ARN in GitHub environment variables for later use
          echo "LAYER2_ARN=$LAYER2_ARN" >> $GITHUB_ENV

      - name: Compile TypeScript
        run: |
          cd api
          npm run build

      - name: Package and Deploy Application Code to AWS Lambda
        run: |
          cd api
          
          # Package only app code (excluding node_modules)
          zip -r deploy.zip ./dist/* package.json package-lock.json
          
          # Upload the function code
          aws lambda update-function-code \
            --function-name schedsyncapi \
            --zip-file fileb://deploy.zip \
            --region ${{ secrets.AWS_REGION }}

      - name: Attach Layers to Lambda Function
        run: |
          aws lambda update-function-configuration \
            --function-name schedsyncapi \
            --layers $LAYER1_ARN $LAYER2_ARN \
            --region ${{ secrets.AWS_REGION }}